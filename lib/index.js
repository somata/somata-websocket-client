// Generated by CoffeeScript 1.10.0
(function() {
  var Kefir, KefirBus, randomString,
    slice = [].slice;

  Kefir = require('kefir');

  KefirBus = require('kefir-bus');

  randomString = function(len) {
    var s;
    if (len == null) {
      len = 8;
    }
    s = '';
    while (s.length < len) {
      s += Math.random().toString(36).slice(2, len - s.length + 2);
    }
    return s;
  };

  module.exports = function(address) {
    var connect, connected$, message$, remote, subscribe, ws;
    connected$ = KefirBus();
    connected$.onValue(function() {
      return console.log("[" + address + "] Connected");
    });
    message$ = KefirBus();
    ws = null;
    connect = function() {
      ws = new WebSocket(address);
      ws.onopen = function() {
        return connected$.emit(true);
      };
      ws.onclose = function() {
        console.log("[" + address + "] Closed");
        return connect();
      };
      return ws.onmessage = function(arg) {
        var data;
        data = arg.data;
        return message$.emit(JSON.parse(data));
      };
    };
    remote = function() {
      var args, data, id, method, service;
      service = arguments[0], method = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
      id = randomString();
      data = JSON.stringify({
        kind: 'remote',
        service: service,
        method: method,
        args: args,
        id: id
      });
      ws.send(data);
      return message$.filter(function(message) {
        return message.kind === 'response' && message.id === id;
      }).map(function(message) {
        return message.response;
      });
    };
    subscribe = function(service, type) {
      var data;
      data = JSON.stringify({
        kind: 'subscribe',
        service: service,
        type: type
      });
      ws.send(data);
      return message$.filter(function(message) {
        return message.kind === 'event' && message.type === type;
      }).map(function(message) {
        return message.event;
      });
    };
    connect();
    return {
      remote: remote,
      subscribe: subscribe,
      connected$: connected$,
      message$: message$
    };
  };

}).call(this);
